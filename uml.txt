@startuml
package "geometry" {
    class Main


package "shapes" {
    Shape <|-- Circle
    Shape <|-- Rectangle
    Shape <|-- RegularPentagon
    Shape <|-- Triangle
    Rectangle <|-- Square
    Triangle <|-- EquilateralTriangle
}

package "containers" {
    class ShapeCollection {
        ~ List<Shape> shapesCollection
        + void addShape(Shape shape)
        + void getShapesTable()
    }
}

package "utilities" {
    class FormulaProvider {
        {static} String getAreaForShape(String shape)
        {static} String getPerimeterForShape(String shape)
    }
}

abstract class Shape {
  {abstract} double calculateArea()
  {abstract} double calculatePerimeter()
  {static} boolean checkIfArgsGreaterThanZero(float... args)
}

class Circle {
  - private final double r
  + Circle(double r)
  + double calculateArea()
  + double calculatePerimeter()
  + String toString()
  + {static} String getFormulaArea()
  + {static} String getFormulaPerimeter()
}

class Rectangle {
    - final double a
    - final double b
    + Rectangle(double a, double b)
    + double getA()
    + double calculateArea()
    + double calculatePerimeter()
    + String toString()
}

class RegularPentagon {
    - final double a
    + RegularPentagon(double a)
    + double calculateArea()
    + double calculatePerimeter()
    + String toString()
}

class Triangle {
    - final double a
    - final double b
    - final double c
    + Triangle(double a, double b, double c)
    + getA()
    + double calculateArea()
    + double calculatePerimeter()
    + String toString()
}

class EquilateralTriangle {
    + String toString()
}

class Square {
    + Square(double a)
    + String toString()
}
}
@enduml